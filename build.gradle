plugins {
    id 'java'
    id 'application'
}

group = "com.mo1ty"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.eclipse.paho:org.eclipse.paho.mqttv5.client:1.2.5")
    implementation("org.bouncycastle:bcprov-jdk18on:1.77")
    implementation("org.bouncycastle:bcpkix-jdk18on:1.77")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.15.2")
    implementation("org.apache.commons:commons-lang3:3.14.0")
}



tasks.test {
    useJUnitPlatform()
}

task sec1Publisher(type: Jar) {
    mainClassName = 'SecLv1PublisherApp'
    doFirst {
        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    manifest {
        attributes 'Main-Class': "${mainClassName}"
    }
    archiveBaseName = "${rootProject.name}"
    tasks.withType(Jar){
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task sec2Publisher(type: Jar) {
    mainClassName = 'SecLv2PublisherApp'
    doFirst {
        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    manifest {
        attributes 'Main-Class': "${mainClassName}"
    }
    archiveBaseName = "${rootProject.name}"
    tasks.withType(Jar){
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task sec1Subscriber(type: Jar) {
    mainClassName = 'SecLv1SubscriberApp'
    doFirst {
        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    manifest {
        attributes 'Main-Class': "${mainClassName}"
    }
    archiveBaseName = "${rootProject.name}"
    tasks.withType(Jar){
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task sec2Subscriber(type: Jar) {
    mainClassName = 'SecLv2SubscriberApp'
    doFirst {
        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    manifest {
        attributes 'Main-Class': "${mainClassName}"
    }
    archiveBaseName = "${rootProject.name}"
    tasks.withType(Jar){
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}